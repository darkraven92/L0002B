using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;

namespace Lab2
{
    class Program
    {
        static Program p;
        volatile List<SellerObject> sellerList = new List<SellerObject>();

        /*
         * Main method of program.
         * Creates a program and runs "input()" 6 times. First time it is run with argument "true" overwriting
         * an existing file. Then with "false" to append to the same file.
         * 
         * 
         */
        public static void Main(string[] args)
        {

            
            p = new Program();
            p.input(true);
            for (int i = 0; i<1; i++)
            {
                p.input(false);
            }

            p.readFile();
            p.printSort();
            
            // So that program doesn't close directly after execution, so that results can be read.
            Console.ReadKey();
            
        }
        /*
         * Handles input. Takes Name, social security number, district and number of sold articles.
         * argument "bool clear" decides whether the file is overwritten or not.
         * Variables are separated from descriptive text with ":" and from each other with "$".
         * Filepath for write operation is relative to the project, file is situated in "Labb2\bin\Debug"
         * The file is named "lab2_data.txt"
         */
        public void input(bool overwrite)
        {
            try
            {
                Console.WriteLine("\nNamn: ");
                string nameIn = Console.ReadLine();
                Console.WriteLine("Personnummer: ");
                string numIn = Console.ReadLine();
                Console.WriteLine("Distrikt: ");
                string disIn = Console.ReadLine();
                Console.WriteLine("Antal sålda artiklar: ");
                int amountIn = Int32.Parse(Console.ReadLine());

                using (System.IO.StreamWriter file =
                  new System.IO.StreamWriter(AppDomain.CurrentDomain.BaseDirectory + @"\" + "lab2_data.txt", !overwrite))
                {
                    file.WriteLine("Namn:" + nameIn + "$ Personnummer:" + numIn + "$ Distrikt:" + disIn + "$ Antal:" + amountIn);
                }
            }
            catch (Exception f)
            {
                System.Diagnostics.Debug.Write(f);
            }
        }
        /*
         * Handles printing to console and sorting output.
         * Output is sorted according to specification in lab.
         * Each writeline statement is formatted for easier reading of the data.
         */
        public void printSort()
        {
            var sortedSellers = sellerList.OrderBy(o => o.amount);

            // keeps track of the level 1-4 so that the last print out at the end of the tier can keep track.
            int level = 0;

            // Keeps track of the amount of sellers in each tier.
            int sellersTier = 0;
            
            Console.WriteLine("{0,0}{1,10}{2,16}{3,10}{4,10}{5,10}{6,10}",
              "\nNamn",
              " ",
              "Persnr",
              " ",
              "Distrikt",
              " ",
              "Antal");
            
            //Keeps track of where last object is
            int lastObj = sortedSellers.Count();

            //Keeps track of the object that is currently used.
            int countObjects = 0;

            foreach (SellerObject value in sortedSellers)
            {
                /*
                 * Checks if the current object is the last in its tier.
                 * If it was the last object in that tier, then end of tier text is written.
                 * Only checked for tier 1-3 as tier 4 is checked directly after the loop has ended.
                 */
                if (sellersTier != 0 && level == 1 && value.getAmount() > 49)
                {
                    Console.WriteLine(sellersTier + " säljare har nått nivå 1: under 50 artiklar\n");
                    sellersTier = 0;
                }
                else if (sellersTier != 0 && level == 2 && value.getAmount() > 99)
                {
                    Console.WriteLine(sellersTier + " säljare har nått nivå 2: 50-99 artiklar\n");
                    sellersTier = 0;
                }
                else if (sellersTier != 0 && level == 3 && value.getAmount() > 199)
                {
                    Console.WriteLine(sellersTier + " säljare har nått nivå 3: 100-199 artiklar\n");
                    sellersTier = 0;
                }
                
                // Tier 1
                if (value.getAmount() < 50)
                {
                    Console.WriteLine("{0,10}{1,10}{2,10}{3,10}{4,10}{5,10}{6,10}",
                        value.getName(),
                           " ",
                        value.getSocialNum(),
                           " ",
                        value.getDist(),
                           " ",
                        value.getAmount());
                    level = 1;
                }

                // Tier 2
                else if (value.getAmount() < 100)
                {
                    Console.WriteLine("{0,10}{1,10}{2,10}{3,10}{4,10}{5,10}{6,10}",
                          value.getName(),
                         "",
                        value.getSocialNum(),
                         "",
                        value.getDist(),
                         "",
                        value.getAmount());
                    level = 2;
                }

                // Tier 3
                else if (value.getAmount() < 200)
                {
                    Console.WriteLine("{0,10}{1,10}{2,10}{3,10}{4,10}{5,10}{6,10}",
                        value.getName(),
                         "",
                        value.getSocialNum(),
                         "",
                        value.getDist(),
                         "",
                        value.getAmount());
                    level = 3;
                }

                // Tier 4
                else
                {
                    Console.WriteLine("{0,10}{1,10}{2,10}{3,10}{4,10}{5,10}{6,10}",
                        value.getName(),
                         "",
                        value.getSocialNum(),
                         "",
                        value.getDist(),
                         "",
                        value.getAmount());
                    level = 4;

                }
                
                /* Writes end of tier text for the last object. It is only used on last object because
                 * as level on last object as the last objects level is otherwise not checked towards the
                 * end of tier text at the top of the foreach loop. The level value is assigned after it is
                 * checked for the last object. So it needs to check one more time for that object.
                 */
                if (countObjects == lastObj)
                {
                    if (level == 1)
                    {
                        Console.WriteLine(sellersTier + " säljare har nått nivå 1: under 50 artiklar\n");
                    }
                    if (level == 2)
                    {
                        Console.WriteLine(sellersTier + " säljare har nått nivå 2: 50-99 artiklar\n");
                    }
                    if (level == 3)
                    {
                        Console.WriteLine(sellersTier + " säljare har nått nivå 3: 100-199 artiklar\n");
                    }
                }
                countObjects++;
                sellersTier++;
            }
            /*
             * Writes out end of tier text for tier 4.
             */
            if (sellersTier != 0 && level == 4)
            {
                Console.WriteLine(sellersTier + " säljare har nått nivå 4: över 199 artiklar\n");
                sellersTier = 0;                
            }
        }

        /*
         * Reads all lines and inputs them into an array, where each line is a post in the array.
         * Then splits the input with separators ":" and "$" and put them in the right variables
         * in a SellerObject.
         * Filepath for read operation is relative to the project, file is situated in "Labb2\bin\Debug".
         * The file is named "lab2_data.txt"
         */
        public void readFile()
        {
            sellerList.Clear();
           
            char[] delimiterChars = {'$', ':'};
            string[] temp;
            string[] lines = null;
            
            // Reads all lines and inputs them into an array, where each line is a position in the array.
            try { lines = System.IO.File.ReadAllLines(AppDomain.CurrentDomain.BaseDirectory + @"\" + "lab2_data.txt"); }
            catch (FileNotFoundException ex)
            {
                Console.WriteLine(ex);
            }
            // Loops through the lines and splits them into the different variables for a SellerObject.
            for (int i = 0; i < lines.Length; i++)
            {
                temp = lines[i].Split(delimiterChars);
                SellerObject temp2 = new SellerObject(temp[1], temp[3], temp[5], Int32.Parse(temp[7]));

                // Adds the current SellerObject (i.e. a seller) to an ArrayList to keep track of all sellers.
                sellerList.Add(temp2);

            }
        }
    }
    /*
     * Object to keep track of the variables of a seller for easier handling of the data.
     * Contains methods for getting all variables. Variables can only be set when object is created.
     */
   public class SellerObject
    {
        //Name, social security number, district and amount sold.
        string name = "";
        string socialNum = "";
        string dist = "";
        public int amount = -1;

        //Constructor creates an object, variables can only be set in the constructor.
        public SellerObject(string name, string num, string dist, int amount)
        {
            this.name = name;
            this.socialNum = num;
            this.dist = dist;
            this.amount = amount;
        }

        // Getter for name
        public string getName()
        {
            return this.name;
        }

        // Getter for social security number
        public string getSocialNum()
        {
            return this.socialNum;
        }

        // Getter for district
        public string getDist()
        {
            return this.dist;
        }

        // Getter for amount
        public int getAmount()
        {
            return this.amount;
        }
    }
}
